#!/bin/bash
# Workflow avancé pour générer un device tree Galaxy A56x avec magiskboot intégré

set -e

# -------------------------
# Variables
# -------------------------
REPO_URL="https://gitgud.io/Van-Firmware-Dumps/samsung/a56x.git"
MAGISKBOOT_REPO="https://github.com/Luciiuss/sm-a566b/tree/main/magiskboot"
WORKDIR="$HOME/a56x_firmware"
DEVICEDIR="$WORKDIR/device/samsung/a56x"
VENDORDIR="$WORKDIR/vendor/samsung/a56x"
TMPDIR="$WORKDIR/tmp_extraction"
MAGISKBOOT_DIR="$WORKDIR/magiskboot"

# Dépendances (installer si nécessaire)
# sudo apt install android-tools-adb android-tools-fastboot device-tree-compiler simg2img cpio

# -------------------------
# Clonage du repo principal
# -------------------------
echo "[*] Clonage du repo principal..."
git clone "$REPO_URL" "$WORKDIR"
cd "$WORKDIR"

# -------------------------
# Clonage et compilation de magiskboot
# -------------------------
echo "[*] Clonage du repo magiskboot..."
git clone "$MAGISKBOOT_REPO" "$MAGISKBOOT_DIR"
cd "$MAGISKBOOT_DIR"
echo "[*] Compilation de magiskboot..."
make
cd "$WORKDIR"

# -------------------------
# Création des répertoires nécessaires
# -------------------------
mkdir -p "$DEVICEDIR" "$VENDORDIR" "$TMPDIR"

# -------------------------
# Extraction des images boot/vendor_boot
# -------------------------
for IMG in $(find . -type f -name "boot.img" -o -name "vendor_boot.img"); do
    echo "[*] Extraction de $IMG..."
    IMG_BASENAME=$(basename "$IMG")
    mkdir -p "$TMPDIR/boot"
    cp "$IMG" "$TMPDIR/boot/"
    cd "$TMPDIR/boot"
    
    if [ -f "$MAGISKBOOT_DIR/magiskboot" ]; then
        "$MAGISKBOOT_DIR/magiskboot" unpack "$IMG_BASENAME"
    else
        echo "[-] magiskboot non trouvé dans $MAGISKBOOT_DIR"
        exit 1
    fi

    # Décompresser le ramdisk
    if [ -f "ramdisk.cpio" ]; then
        mkdir -p ramdisk
        cd ramdisk
        cpio -idm < ../ramdisk.cpio
        # Copier init.rc et fstab
        cp -v init*.rc fstab.* "$DEVICEDIR/" 2>/dev/null || true
        cd ..
    fi

    # Extraire le DTB
    if [ -f "split_img/boot.img-dtb" ]; then
        dtc -I dtb -O dts -o "$DEVICEDIR/kernel_extracted.dts" split_img/boot.img-dtb
    fi
    cd "$WORKDIR"
done

# -------------------------
# Extraction des images system/vendor
# -------------------------
for SYSIMG in $(find . -type f -name "system.img" -o -name "vendor.img"); do
    echo "[*] Extraction de $SYSIMG..."
    mkdir -p "$TMPDIR/sys"
    cp "$SYSIMG" "$TMPDIR/sys/raw.img"
    
    simg2img "$TMPDIR/sys/raw.img" "$TMPDIR/sys/system.raw.img"
    mkdir -p "$TMPDIR/sys/mnt"
    sudo mount -o loop "$TMPDIR/sys/system.raw.img" "$TMPDIR/sys/mnt"

    # Copier les blobs
    SRCDIR="$TMPDIR/sys/mnt"
    cp -r "$SRCDIR"/* "$VENDORDIR/"
    sudo umount "$TMPDIR/sys/mnt"
done

# -------------------------
# Création des fichiers du device tree
# -------------------------
echo "[*] Création des fichiers du device tree..."

# BoardConfig.mk
cat > "$DEVICEDIR/BoardConfig.mk" << EOF
BOARD_KERNEL_CMDLINE := androidboot.hardware=samsung
BOARD_KERNEL_BASE := 0x10008000
BOARD_KERNEL_PAGESIZE := 2048
BOARD_KERNEL_TAGS_ADDR := 0x10000100
BOARD_KERNEL_TAGS_SIZE := 0x200
BOARD_RAMDISK_OFFSET := 0x01000000
EOF

# AndroidProducts.mk
cat > "$DEVICEDIR/AndroidProducts.mk" << EOF
include \$(CLEAR_VARS)
LOCAL_MODULE := android-info
LOCAL_SRC_FILES := android-info.txt
LOCAL_MODULE_PATH := \$(TARGET_OUT)/system/etc
include \$(BUILD_PREBUILT)
EOF

# device.mk
cat > "$DEVICEDIR/device.mk" << EOF
include \$(CLEAR_VARS)
LOCAL_MODULE := libstagefright
LOCAL_SRC_FILES := \$(call all-subdir-java-files)
LOCAL_MODULE_TAGS := optional
include \$(BUILD_MULTI_PREBUILT)
EOF

# fstab
cat > "$DEVICEDIR/fstab.a56x" << EOF
/dev/block/bootdevice/by-name/system      /system      ext4    ro      wait
/dev/block/bootdevice/by-name/vendor      /vendor      ext4    ro      wait
/dev/block/bootdevice/by-name/cache       /cache       ext4    rw      wait
EOF

# -------------------------
# Génération de proprietary-files.txt
# -------------------------
echo "[*] Génération de proprietary-files.txt..."
cd "$VENDORDIR"
find . -type f | sed "s|^\./||" > proprietary-files.txt

# -------------------------
# Rapport
# -------------------------
echo "[*] Device tree Galaxy A56x prêt !"
echo "Chemin du device tree : $DEVICEDIR"
echo "Blobs propriétaires : $VENDORDIR/proprietary-files.txt"
echo "[*] Fichiers init et fstab copiés depuis le ramdisk."

echo "[*] Nettoyage temporaire..."
rm -rf "$TMPDIR"

echo "[*] Terminé. Vous pouvez maintenant compiler TWRP ou LineageOS."